def calculatecenter():
    xilidu = sorted(os.listdir("/home/sq/data/细粒度/train")) # 大类按照顺序 list ['555','Meco']
    scan = os.listdir("/home/sq/pycharm_projects/Basic_CNNs_TensorFlow2-master/k-means/dbscan/")
    dbscan_path = "/home/sq/pycharm_projects/Basic_CNNs_TensorFlow2-master/k-means/dbscan/"
    oriimg_path = "/home/sq/data/dateset/rp2k_new/all/train/"
    class_centers = []  # 存入所有类dbscan获取的聚类中心，后续求质心
    for index, class_name in enumerate(xilidu):
        print(index)
        if class_name in scan: # dbscan质心 class_path
            dbscan_pics = os.listdir(os.path.join(dbscan_path,class_name)) # ["1.jpg","2.jpg"]
            this_center = []
            for dbscan_pic in dbscan_pics:
                temp = np.expand_dims(sift_fea(os.path.join(dbscan_path,class_name,dbscan_pic)),0)
                this_center.extend(temp)  # 图像patch个数*2000
            class_centers.append(np.squeeze(np.mean(np.array(this_center),axis=0),1))
        elif os.listdir(os.path.join('/home/sq/data/细粒度/train/',class_name)): # 没有质心但有小类
            this_center = []
            classes = os.listdir(os.path.join('/home/sq/data/细粒度/train/', class_name))  # [”补水“,"控油"]
            for classe in classes: # ["补水"]
                currentpath = pathlib.Path(os.path.join('/home/sq/data/crops/train/',classe))
                img_paths = [str(path) for path in list(currentpath.glob('*/'))]
                for img_path in img_paths:
                    temp = np.expand_dims(sift_fea(img_path), 0)
                    this_center.extend(temp)  # 图像patch个数*2000
            class_centers.append(np.squeeze(np.mean(np.array(this_center), axis=0), 1))
        else:
            dbscan_pics = os.listdir(os.path.join(oriimg_path, class_name))  # ["1.jpg","2.jpg"]
            this_center = []
            for dbscan_pic in dbscan_pics:
                temp = np.expand_dims(sift_fea(os.path.join(oriimg_path,class_name,dbscan_pic)),0)
                this_center.extend(temp)  # 图像patch个数*2000
            class_centers.append(np.squeeze(np.mean(np.array(this_center), axis=0),1))
    # kmeascenter_40 = open("457cats_center.csv",'ab')
    # np.savetxt(kmeascenter_40, X=class_centers, delimiter=",")
    # kmeascenter_40.close()
