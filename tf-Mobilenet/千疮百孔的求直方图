def boxes(img_path,step):
    global index

    if step==2 or step==1:
        fil = "train"
    elif step==3 or step==4:
        fil = "test"

    global centers2000,centers457
    # 输入一张图片路径，根据很多个坐标框返回每个patch的sift特征
    descriptor = cv2.SIFT_create()

    new_path = "/home/sq/data/cropnpz/"+fil+"/"
    dir1 = os.path.dirname(img_path)  # /home/sq/data/dateset/rp2k_new/all/train/555（冰炫）
    label_name = os.path.basename(dir1)  # 555（冰炫）
    file_name = os.path.basename(img_path)
    base_name = os.path.splitext(file_name)[0]
    npz_path = new_path + label_name + '/' + base_name + '.npz'
    read = np.load(npz_path)
    result = read['a']
    it = iter(result) # 很多个坐标框

    image = cv2.imread(img_path) # 高 宽 深度
    # image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    image_patch = []
    num = 0


    for i in range(len(result)): # 一个patch
        num += 1
        patch_sift = np.zeros((2000,))

        line = next(it)  # line = [[ 77, 511],[ 72, 418],[423, 399],[428, 493]]
        left = min(line[0][0], line[1][0], line[2][0], line[3][0])
        right = max(line[0][0], line[1][0], line[2][0], line[3][0])
        upper = min(line[0][1], line[1][1], line[2][1], line[3][1])
        lower = max(line[0][1], line[1][1], line[2][1], line[3][1])
        # print("{},{},{},{}".format(upper, lower, left, right))
        upper = int(max(upper, 0))
        lower = int(max(lower, 0))
        left = int(max(left, 0))
        right = int(max(right, 0))
        cropImg = image[upper:lower,left:right] # 高 宽 深度
        (kps, features) = descriptor.detectAndCompute(cropImg, None) # 返回值 des为 128 维向量组成的列表； kps 为关键点列表，每个元素为一个 KeyPoint
        if features is None or features.shape[0]<10:
            continue
        # if features is None:
        #     continue
        if kps and features.shape: # 提取到sift特征，一个patch返回一个2000维的向量
            # 图像保存在一个文件夹里
            # shutil.copy("/home/sq/data/crops/train/" + label_name + "/" + base_name + "-" + str(i + 1) + ".jpg", "/home/sq/pycharm_projects/Basic_CNNs_TensorFlow2-master/k-means/555/")

            # 打开一次，写入一次
            # namefile = open("/home/sq/pycharm_projects/Basic_CNNs_TensorFlow2-master/k-means/name.txt", 'ab')
            # namefile.write(str("/home/sq/data/crops/train/" + label_name + "/" + base_name + "-" + str(i + 1) + ".jpg"+"\n").encode())
            # namefile.close()

            # print(str(index)+" "+"/home/sq/data/crops/train/" + label_name + "/" + base_name + "-" + str(i + 1) + ".jpg")
            index +=1
            for j in range(0, features.shape[0]):
                fi = features[j]
                diffMat = np.tile(fi, (2000, 1)) - centers2000 # centers 1000*128
                # axis=1按行求和，即求特征到每个中心点的距离
                sqSum = (diffMat ** 2).sum(axis=1)
                dist = sqSum ** 0.5
                # 升序排序
                sortedIndices = dist.argsort()
                # 取出最小的距离，即找到最近的中心点
                idx = sortedIndices[0]
                # 该中心点对应+1
                patch_sift[idx] += 1
        # patch_sift就是一个2000维的向量
        #     image_patch.append(patch_sift)
            image_patch.append(normalize(patch_sift.reshape(-1,1), norm='l1').tolist())
    # print(num)

    return image_patch
